@precedence {
    return,
    call,
    exprwithblock,
    member,
    power @right,
    prefix,
    logicalor @left,
    logicaland @left,
    range @left,
    multiply @left,
    plus @left,
    shift @left,
    bitand @left,
    bitxor @left,
    bitor @left,
    compare @left,
    assign @right
}

@top Program {
    (Item)*
}

Item {
    ImportItem |
    LetStatement |
    FunctionDefinition |
    PubItem
}

PubItem {
    kw<"pub"> ( TypeDefinition | LetStatement | FunctionDefinition )
}

ImportItem {
    kw<"import">

    (
        ImportItemCanditate  |
        ( "{" ImportItemCanditate ( ',' ImportItemCanditate )* ','? "}" )
    )

    kw<"from"> Module ";"
}

ImportItemCanditate {
    (kw<"type"> TypeImport | Ident)
}

TypeImport {
    Ident
}

TypeDefinition {
    kw<"type"> Ident "=" Type ";"
}

Module {
    Ident
}

Type {
    identType |
    listType |
    objectType |
    optionType
}

identType {
    Word
}

listType {
    ("[" Type "]")
}

objectType {
    ("{" objectTypeFields? "}")
}

objectTypeFields {
    "?" | objectTypeField ("," objectTypeField)* (",")?
}

objectTypeField {
    (Ident | String) ":" Type
}

optionType {
    QuestionMark Type
}

FunctionDefinition {
    kw<"fn"> Ident Parameters ( "->" Type )? Block
}

Parameters {
    "(" (Ident ":" Type ("," Ident ":" Type )*)? ")"
}

Block {
    "{" (Statement)* (Expression)? "}"
}

Statement {
    TypeDefinition |
    LetStatement |
    ReturnStatement |
    BreakStatement |
    ContinueStatement |
    LoopStatement |
    WhileStatement |
    ForStatement |
    ExpressionStatement
}

LetStatement {
    kw<"let"> Ident ( ":" Type )? "=" Expression ";"
}

ReturnStatement {
    kw<"return"> Expression? ";"
}

BreakStatement {
    kw<"break"> ";"
}

ContinueStatement {
    kw<"continue"> ";"
}

LoopStatement {
    kw<"loop"> Block (";")?
}

WhileStatement {
    kw<"while"> Expression Block (";")?
}

ForStatement {
    kw<"for"> Ident kw<"in"> Expression Block (";")?
}

ExpressionStatement {
    (ExpressionWithoutBlock ";") |
    (!exprwithblock ExpressionWithBlock (";")?)
}

Expression {
    ExpressionWithBlock |
    ExpressionWithoutBlock
}

ExpressionWithBlock {
    Block |
    IfExpression |
    TryExpression
}

IfExpression {
  kw<"if"> Expression Block (kw<"else"> ( IfExpression | Block ))?
}

TryExpression {
    kw<"try"> Block kw<"catch"> Ident Block
}

ExpressionWithoutBlock {
    Number |
    Boolean |
    String |
    VariableName |
    kw<"null"> |
    kw<"none"> |
    ListLiteral |
    ObjectLiteral |
    FunctionLiteral |
    "(" Expression ")" |
    PrefixExpression |
    RangeExpression |
    InfixExpression |
    AssignExpression |
    CallExpression |
    IndexExpression |
    MemberExpression |
    CastExpression
}

Boolean {
    @specialize[@name=Boolean]<Ident, "true" | "false">
}

ListLiteral {
    "[" ( Expression ( "," Expression )* (",")? )? "]"
}

ObjectLiteral {
    kw<"new"> "{" objectLiteralFields? "}"
}

objectLiteralFields {
    "?" | objectLiteralField ("," objectLiteralField)* (",")?
}

objectLiteralField {
    (Ident | String) ":" Expression
}

FunctionLiteral {
    kw<"fn"> Parameters ( "->" Type )? Block
}

PrefixExpression {
    !prefix ( Minus | Not | QuestionMark ) Expression
}

InfixExpression {
    Expression !bitor BitOr Expression |
    Expression !bitxor BitXor Expression |
    Expression !bitand BitAnd Expression |
    Expression !shift ( ShiftLeft | ShiftRight ) Expression |
    Expression !plus ( Plus | Minus ) Expression |
    Expression !multiply ( Multiply | Divide | Modulo ) Expression |
    Expression !power Power Expression |
    Expression !logicaland LogicalAnd Expression |
    Expression !logicalor LogicalOr Expression |
    Expression !compare ( Equal | NotEqual | LessThan | LessThanEqual | GreaterThan | GreaterThanEqual ) Expression
}

RangeExpression {
    Expression !range Range Expression
}

AssignExpression {
    Expression !assign AssignOp Expression
}

CallExpression {
    CallBase !call "(" callArguments? ")"
}

CallBase { Expression }

callArguments {
    Expression ( "," Expression )* ","?
}

MemberExpression {
    Expression !member "." Ident
}

IndexExpression {
    Expression "[" Expression "]"
}

CastExpression {
    Expression kw<"as"> Type
}

@skip { skip_token | LineComment | BlockComment }

@tokens {
    Number {
        $[0-9]+ ("\." $[0-9]+)?
    }

    Word { $[a-zA-Z_] $[a-zA-Z0-9_]* }

    Ident {
        Word
    }

    String {
        '"' (![\\"] | "\\" _)* '"'? |
        "'" (![\\'] | "\\" _)* "'"?
    }

    skip_token {
        " " | "\n" | "\t" | "\r"
    }

    LineComment { "//" ![\n]* }

    BlockComment { "/*" blockCommentRest }
    blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }
    blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

    AssignOp {
        "=" |
        "+=" |
        "-=" |
        "*=" |
        "/=" |
        "%=" |
        "**=" |
        "<<=" |
        ">>=" |
        "|=" |
        "&=" |
        "^="
    }

    Not { "!" }
    Plus { "+" }
    Minus { "-" }

    Multiply { "*" }
    Divide { "/" }
    Modulo { "%" }
    Power { "**" }

    Equal { "==" }
    NotEqual { "!=" }
    LessThan { "<" }
    LessThanEqual { "<=" }
    GreaterThan { ">" }
    GreaterThanEqual { ">=" }

    ShiftLeft { "<<" }
    ShiftRight { ">>" }
    BitOr { "|" }
    BitAnd { "&" }
    BitXor { "^" }
    LogicalOr { "||" }
    LogicalAnd { "&&" }
    Range { ".." }
    QuestionMark { "?" }

    "." "," ";"
    "(" ")" "{" "}" "[" "]"

    @precedence { LineComment, Divide }
}

kw<term> { @specialize[@name={term}]<Ident, term> }

BuiltinFunc { @specialize[@name=BuiltinFunc]<Ident, "exit" | "throw" | "assert" | "print" | "println" | "debug"> }
VariableName { BuiltinFunc | Ident }
