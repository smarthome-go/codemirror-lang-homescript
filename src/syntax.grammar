@skip { skip_token | LineComment | BlockComment }
@precedence {
    return,
    comment,
    call,
    exprwithblock,
    range @right,
    member @right,
    prefix @right,
    infix @left,
    assign @right
}

@top Program {
    (Item)*
}

Item {
    ImportItem |
    TypeDefinition |
    (kw<"pub">)? LetStatement |
    (kw<"pub">)? FunctionDefinition
}

ImportItem {
    kw<"import"> ( Ident | ("{" Ident ( "," Ident )* (",")? "}") ) kw<"from"> Module ";"
}

TypeDefinition {
    kw<"type"> Ident "=" Type ";"
}

Module {
    Ident
}

Type {
    Word |
    ("[" Type "]") |
    ("{" objectTypeFields? "}")
}

objectTypeFields {
    objectTypeField ("," objectTypeField)* (",")?
}

objectTypeField {
    Ident ":" Type
}

FunctionDefinition {
    kw<"fn"> Ident Parameters ("->" Type)? Block
}

Parameters {
    "(" parameterList? ")"
}

parameterList {
    parameter ( "," parameter ) ","?
}

parameter {
    Ident ":" Type
}

Block {
    "{" (Statement)* Expression? "}"
}

Statement {
    TypeDefinition |
    LetStatement |
    ReturnStatement |
    BreakStatement |
    ContinueStatement |
    LoopStatement |
    WhileStatement |
    ForStatement |
    ExpressionStatement
}

LetStatement {
    kw<"let"> Ident ( ":" Type )? "=" Expression ";"
}

ReturnStatement {
    kw<"return"> Expression? ";"
}

BreakStatement {
    kw<"break"> ";"
}

ContinueStatement {
    kw<"continue"> ";"
}

LoopStatement {
    kw<"loop"> Block (";")?
}

WhileStatement {
    kw<"while"> Expression Block (";")?
}

ForStatement {
    kw<"for"> Ident kw<"in"> Expression Block (";")?
}

ExpressionStatement {
    (ExpressionWithoutBlock ";") |
    (!exprwithblock ExpressionWithBlock (";")?)
}

Expression {
    ExpressionWithBlock | ExpressionWithoutBlock
}

ExpressionWithBlock {
    Block | IfExpression | TryExpression
}

IfExpression {
    kw<"if"> Expression Block ( kw<"else"> Expression Block  )?
}

TryExpression {
    kw<"try"> Block kw<"catch"> Ident Block
}

ExpressionWithoutBlock {
    Number |
    Boolean |
    String |
    VariableName |
    kw<"null"> |
    RangeLiteral |
    ListLiteral |
    ObjectLiteral |
    FunctionLiteral |
    "(" Expression ")" |
    PrefixExpression |
    InfixExpression |
    AssignExpression |
    CallExpression |
    IndexExpression |
    MemberExpression |
    CastExpression
}

Boolean {
    @specialize[@name=Bool]<Ident, "true" | "false">
}

RangeLiteral {
    Expression !range ".." Expression
}

ListLiteral {
    "[" ( Expression ( "," Expression )* (",")? )? "]"
}

ObjectLiteral {
    kw<"new"> "{" ( objectLiteralField ("," objectLiteralField)* (",")? )? "}"
}

objectLiteralField {
    Ident ":" Expression
}

FunctionLiteral {
    kw<"fn"> Parameters ( "->" Type )? Block
}

PrefixExpression {
    !prefix PrefixOp Expression
}

InfixExpression {
    Expression !infix InfixOp Expression
}


AssignExpression {
    Ident !assign AssignOp Expression
}

CallExpression {
    Expression !call "(" callArguments? ")"
}

callArguments {
    Expression ( "," Expression )* ","?
}

MemberExpression {
    Expression !member "." Ident
}

IndexExpression {
    Expression "[" Expression "]"
}

CastExpression {
    Expression kw<"as"> Type
}

@tokens {
    Number {
        $[0-9]+ ("\." $[0-9]+)?
    }

    Word { $[a-zA-Z_] $[a-zA-Z0-9_]* }

    Ident {
        Word
    }

    String {
        '"' (![\\"] | "\\" _)* '"'? |
        "'" (![\\'] | "\\" _)* "'"?
    }

    skip_token {
        " " | "\n" | "\t" | "\r"
    }

    LineComment {
        "//" ![\n]*
    }

    BlockComment { "/*" blockCommentRest }
    blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }
    blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

    InfixOp {
        "+" |
        "-" |
        "*" |
        "/" |
        "%" |
        "**" |
        "==" |
        "!=" |
        "<" |
        ">" |
        "<=" |
        ">=" |
        "<<" |
        ">>" |
        "|" |
        "&" |
        "^" |
        "||" |
        "&&"
    }

    AssignOp {
        "=" |
        "+=" |
        "-=" |
        "*=" |
        "/=" |
        "%=" |
        "**=" |
        "<<=" |
        ">>=" |
        "|=" |
        "&=" |
        "^="
    }

    PrefixOp {
        "-"
        | "!"
    }

    "." "," ";"
    "(" ")" "{" "}" "[" "]"

    @precedence { LineComment, AssignOp, PrefixOp, InfixOp }
}

kw<term> { @specialize[@name={term}]<Ident, term> }

BuiltinFunc { @specialize[@name=BuiltinFunc]<Ident, "exit" | "throw" | "assert" | "print" | "println" | "debug"> }
VariableName { BuiltinFunc | Ident }
